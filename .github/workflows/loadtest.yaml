name: ve-performance check
on:
  pull_request:
  schedule:
    - cron: '0 1 * * *'
env:
  KUBECONFIG: "${{ github.workspace }}/aks.yaml"
  GO_VERSION: 1.14
  LOGCLI_VERSION: v1.6.0
  GOPATH: /home/runner/work/
  GOPROXY: https://proxy.golang.org,https://goproxy.io,direct
  ACR_HOST: usciregistry.azurecr.io
  PROMETHEUS_USER: ${{secrets.PROMETHEUS_USER}}
  PROMETHEUS_PASS: ${{secrets.PROMETHEUS_PASS}}
  LOKI_USERNAME: ${{secrets.PROMETHEUS_USER}}
  LOKI_PASSWORD: ${{secrets.PROMETHEUS_PASS}}
  LOKI_URL: "https://loki.uscifarm.insolar.io"
jobs:
  prepare:
    name: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout assured-ledger
        uses: actions/checkout@v2
        with:
          path: ./assured-ledger
          repository: insolar/assured-ledger
          ref: NOISSUE-performance-tests
      - name: Checkout ve-perf-tests
        uses: actions/checkout@v2
        with:
          path: ./ve-perf-tests
      - name: Build docker images
        run: |
          docker build -t $ACR_HOST/ve-perf-tests:${GITHUB_SHA:0:8} ./ve-perf-tests
          cd assured-ledger/ledger-core
          make docker-build
      - name: Push assured ledger image to Azure container registry registry
        run: |
          docker login $ACR_HOST --username ${{secrets.ACR_SP_ID}} --password ${{secrets.ACR_SP_SECRET}}
          docker tag insolar/assured-ledger:latest $ACR_HOST/assured-ledger:${GITHUB_SHA:0:8}
          docker push $ACR_HOST/assured-ledger:${GITHUB_SHA:0:8}
          docker push $ACR_HOST/ve-perf-tests:${GITHUB_SHA:0:8}
  ve-perf-test:
    name: ve-perf-test
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        target: [aks-5node, aks-10node, aks-15node, aks-20node]
    steps:
      - name: Checkout test
        uses: actions/checkout@v2
      - name: Preparation - set prerequisite variables, full sha is ${{github.sha}}
        env:
          TARGET: ${{matrix.target}}
        run: |
          echo "::set-env name=INSOLAR_TAG::${GITHUB_SHA:0:8}"
          echo "::set-env name=INSOLAR_NETWORK_SIZE::${TARGET}"
          echo "::set-env name=INSOLAR_NAMESPACE::${GITHUB_SHA:0:8}-${TARGET}"
          echo "::set-env name=INSOLAR_DESIRED_UPTIME::300"
      - name: Preparation - copy docker auth secret
        run: |
          docker login $ACR_HOST --username ${{secrets.ACR_SP_ID}} --password ${{secrets.ACR_SP_SECRET}}
          cp /home/runner/.docker/config.json deploy/kube/gitops/"$INSOLAR_NETWORK_SIZE"/dockerconfigjson
      - name: Preparation - save kubeconfig
        run: echo "${{secrets.CLOUD_KUBECONFIG}}" >> aks.yaml
      - name: Praparation - github token for gitops access
        run: git config --global url."https://${{secrets.INS_SERVICE_PAT}}@github.com/".insteadOf "https://github.com/"
      - name: Ingress access check (IF THIS STEP FAILED - CALL DEVOPS, RED ALERT)
        run:  curl -s "https://$PROMETHEUS_USER:$PROMETHEUS_PASS@prometheus.uscifarm.insolar.io/prometheus/api/v1/labels" | jq -r '.status'
      - name: Deploy network
        run: |
          kubectl kustomize deploy/kube/gitops/"$INSOLAR_NETWORK_SIZE" | envsubst '${INSOLAR_NAMESPACE} ${INSOLAR_TAG}' | kubectl -n $INSOLAR_NAMESPACE apply -f -
          cat deploy/kube/gitops/svc-pod-virtual.yaml | envsubst '${INSOLAR_NAMESPACE}' | kubectl apply -f -
      - name: Rollout check (IF THIS STEP FAILED - CALL DEV/OPS, YELLOW ALERT)
        run: kubectl -n $INSOLAR_NAMESPACE rollout status sts/virtual --timeout=10m
      - name: Provide link to grafana
        run:  echo "https://monitoring.uscifarm.insolar.io/d/LmD-fXFZz/ins-network?orgId=1&refresh=10s&var-phase=All&var-packetType=All&var-namespace=$INSOLAR_NAMESPACE&from=now-10m&to=now"
      - name: Set network start time variable
        run:  echo "::set-env name=INSOLAR_START_TIME::$(date +'%s')"
      - name: wait until uscifarm.insolar.io is ready
        run: |
          echo 'Sadly we dont know a better way than:'
          sleep 60
      - name: start test
        run: |
          NODES=$(echo $INSOLAR_NETWORK_SIZE | awk '{gsub(/[^[0-9]]*/,"");print}')
          kubectl run ve-perf-tests -n $INSOLAR_NAMESPACE --env="TARGET=http://pod-virtual-rr:32301" --env="REPORT_CSV_FILE=scaling.csv" --env="WALLETS=100" --env="NODES=$NODES" --image="$ACR_HOST/ve-perf-tests:${GITHUB_SHA:0:8}" --tty=true -i --attach=false --requests="cpu=6,memory=5G" --limits="cpu=7900m,memory=12G" --leave-stdin-open=true -- /bin/bash
          for attempt in {1..30}; do
            STATUS=$(kubectl -n $INSOLAR_NAMESPACE get po ve-perf-tests -o jsonpath='{.status.phase}')
            [[ "${STATUS}" == "Running" ]] || sleep $attempt
          done
          kubectl exec ve-perf-tests -n $INSOLAR_NAMESPACE -- go run cmd/test/main.go
          kubectl cp ve-perf-tests:scaling.csv ./scaling.csv -n $INSOLAR_NAMESPACE
          kubectl cp ve-perf-tests:results_csv/ ./ -n $INSOLAR_NAMESPACE
          kubectl cp ve-perf-tests:results_html/ ./ -n $INSOLAR_NAMESPACE
      - name: show some results
        run: |
          cat scaling.csv
      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: ${{matrix.target}}-scaling.csv
          path: scaling.csv
      - name: Upload html to artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:	
          name: html_report	
          path: "**/*.html"
      - name: cleanup
        if: always()
        run: |
          kubectl delete ns ${INSOLAR_NAMESPACE} --ignore-not-found=true
  ve-perf-report:	
    name: ve-perf-report
    needs: ve-perf-test	
    if: ${{ always() }}	
    runs-on: ubuntu-latest
    steps:
      - name: Checkout test
        uses: actions/checkout@v2
      - name: Download all artifacts
        uses: actions/download-artifact@v2
      - name: concatenate all csv's
        run: |
          for log in $(ls aks-*/*.csv | awk '{gsub(/[^[0-9]]*/,"");print}' | sort -n); do cat aks-"$log"node-scaling.csv/scaling.csv; done | tee scaling.csv
      - name: Send report
        if: always()
        run: |
          REPORT_CSV_FILE=scaling.csv REPORT_HTML_FILE=report.html go run cmd/report/main.go
      - name: Upload html to artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: html_report
          path: "**/*.html"
