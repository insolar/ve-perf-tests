name: ve-performance check
on:
  pull_request:
env:
  KUBECONFIG: "${{ github.workspace }}/aks.yaml"
  GO_VERSION: 1.14
  GOPATH: /home/runner/work/
  GOPROXY: https://proxy.golang.org,https://goproxy.io,direct
  ACR_HOST: usciregistry.azurecr.io
jobs:
  ve-performance:
    name: ve-performance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout test
        uses: actions/checkout@v2
      - name: Checkout assured-ledger
        uses: actions/checkout@v2
        with:
          path: ./assured-ledger
          repository: insolar/assured-ledger
      - name: save kubeconfig
        run: echo "${{secrets.CLOUD_KUBECONFIG}}" >> aks.yaml
      - name: Build docker images
        run: |
          cd assured-ledger/ledger-core
          make docker-build
      - name: Push assured ledger image to Azure container registry registry
        run: |
          docker login $ACR_HOST --username ${{secrets.ACR_SP_ID}} --password ${{secrets.ACR_SP_SECRET}}
          docker tag insolar/assured-ledger:latest $ACR_HOST/assured-ledger:${GITHUB_SHA:0:8}
          docker push $ACR_HOST/assured-ledger:${GITHUB_SHA:0:8}
      - name: copy docker auth secret
        run: cp /home/runner/.docker/config.json deploy/kube/aks/dockerconfigjson
      - name: set tag for image
        run: |
          sed -i "s/imagetag/${GITHUB_SHA:0:8}/g" deploy/kube/*/*.*
          cat deploy/kube/aks/kustomization.yaml
      - name: set kube namespace for 5node
        run: |
          echo '::set-env name=PLACEHOLDER::'placeholder
          echo '::set-env name=KUB_NAMESPACE::'${GITHUB_SHA:0:8}5node
      - name: template GIT_SHA to deployment manifests for 5 node
        run: |
          sed -i "s/${PLACEHOLDER}/${KUB_NAMESPACE}/g" deploy/kube/*/*.*
          sed -i "s/${PLACEHOLDER}/${KUB_NAMESPACE}/g" deploy/kube/*/configuration/*.*
      - name: run 5node network
        run: kubectl apply -k deploy/kube/5node
      - name: wait for successfull rollout
        run: kubectl -n ${KUB_NAMESPACE} rollout status sts/virtual
      - name: pulsewatcher
        run: |
          for try in {0..100}; do
          if kubectl -n ${KUB_NAMESPACE} exec -i deploy/pulsewatcher -- bash -c 'pulsewatcher -c /etc/pulsewatcher/pulsewatcher.yaml -s' | grep 'READY' | grep -v 'NOT'; then
           echo "network ready!"; exit 0
          else echo -n '.'; sleep 5
          fi
          done
      - name: start test 5 node
        run: |
          TARGET=http://${KUB_NAMESPACE}.uscifarm.insolar.io REPORT_CSV_FILE=scaling.csv WALLETS=100 NODES=5 go run cmd/test/main.go
          cat scaling.csv
      - name: aggregate logs from 5 node
        run: NODES_COUNT=5 bash deploy/kube/collect_artifacts.sh
      - name: cleanup
        run: kubectl delete ns ${KUB_NAMESPACE} --ignore-not-found=true
